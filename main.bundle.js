(()=>{"use strict";class t{constructor(t=0,e=0){this.x=t,this.y=e}sum(e){return new t(this.x+e.x,this.y+e.y)}diff(e){return new t(this.x-e.x,this.y-e.y)}scaledBy(e){return new t(e*this.x,e*this.y)}perp(){return new t(-this.y,this.x)}}class e{constructor(t,e){this.vector=t,this.index=e}get opposite(){return s[(this.index+4)%8]}}function n(t){return t.reduce(((t,e)=>t+e),0)}const s=Array.from(function*(){let e=new t(-1,-1),n=new t(0,1);for(let t=0;t<4;t++){for(let t=0;t<2;t++)yield e,e=e.sum(n);n=n.perp()}}()).map(((t,n)=>new e(t,n)));class i{constructor(t,e,n){this.connections=t,this.weight=e,this.weightLogWeight=e*Math.log2(e),this.index=n}hasConnection(t){return Boolean(this.connections>>t.index&1)}}const o=[[8,1],[136,1],[132,1],[144,1],[17,1],[68,1],[128,1]].map((([t,e],n)=>new i(t,e,n)));new Map(s.map((t=>[t,new Set(o.filter((e=>e.hasConnection(t))))]))),n(o.map((t=>t.weight))),n(o.map((t=>t.weightLogWeight))),console.log(o)})();